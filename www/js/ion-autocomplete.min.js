/*
 * ion-autocomplete 0.3.0
 * Copyright 2015 Danny Povolotski
 * Copyright modifications 2015 Guy Brand
 * https://github.com/guylabs/ion-autocomplete
 */
!function () {
    "use strict";
    angular.module("ion-autocomplete", []).directive("ionAutocomplete", ["$ionicBackdrop", "$ionicScrollDelegate", "$document", "$q", "$parse", "$interpolate", "$ionicPlatform", "$compile", "$templateRequest", function (a, b, c, d, e, f, g, h, i) {
        return {
            require: ["ngModel", "ionAutocomplete"],
            restrict: "A",
            scope: {},
            bindToController: {
                ngModel: "=",
                templateData: "=",
                itemsMethod: "&",
                itemsClickedMethod: "&",
                itemsRemovedMethod: "&",
                modelToItemMethod: "&",
                searchItems: "=",
                selectedItems: "=",
                cancelButtonClickedMethod: "&",
                placeholder: "@",
                cancelLabel: "@",
                selectItemsLabel: "@",
                selectedItemsLabel: "@"
            },
            controllerAs: "viewModel",
            controller: function (a, b) {
                var c = function (a, b) {
                    return a ? a : b
                }, d = this;
                b(function () {
                    d.placeholder = c(d.placeholder, "Click to enter a value..."), d.cancelLabel = c(d.cancelLabel, "Done"), d.selectItemsLabel = c(d.selectItemsLabel, "Select an item..."), d.selectedItemsLabel = c(d.selectedItemsLabel, f("Selected items{{maxSelectedItems ? ' (max. ' + maxSelectedItems + ')' : ''}}:")(d))
                }), this.maxSelectedItems = c(a.maxSelectedItems, void 0), this.templateUrl = c(a.templateUrl, void 0), this.itemsMethodValueKey = c(a.itemsMethodValueKey, void 0), this.itemValueKey = c(a.itemValueKey, void 0), this.itemViewValueKey = c(a.itemViewValueKey, void 0), this.componentId = c(a.componentId, void 0), this.loadingIcon = c(a.loadingIcon, void 0), this.manageExternally = c(a.manageExternally, "false"), this.showLoadingIcon = !1, this.searchItems = c(this.searchItems, []), this.selectedItems = c(this.selectedItems, []), this.searchQuery = void 0
            },
            link: function (f, j, k, l) {
                var m = l[0], n = l[1];
                n.randomCssClass = "ion-autocomplete-random-" + Math.floor(1e3 * Math.random() + 1);
                var o = ['<div class="ion-autocomplete-container ' + n.randomCssClass + ' modal" style="display: none;">', '<div class="bar bar-header item-input-inset">', '<label class="item-input-wrapper">', '<i class="icon ion-search placeholder-icon"></i>', '<input type="search" class="ion-autocomplete-search" ng-model="viewModel.searchQuery" placeholder="{{viewModel.placeholder}}"/>', "</label>", '<div class="ion-autocomplete-loading-icon" ng-if="viewModel.showLoadingIcon && viewModel.loadingIcon"><ion-spinner icon="{{viewModel.loadingIcon}}"></ion-spinner></div>', '<button class="ion-autocomplete-cancel button button-clear" ng-click="viewModel.cancelClick()">{{viewModel.cancelLabel}}</button>', "</div>", '<ion-content class="has-header">', '<ion-item class="item-divider" ng-show="viewModel.selectedItems.length > 0">{{viewModel.selectedItemsLabel}}</ion-item>', '<ion-item ng-repeat="selectedItem in viewModel.selectedItems track by $index" class="item-icon-left item-icon-right">', '<i class="icon ion-checkmark"></i>', "{{viewModel.getItemValue(selectedItem, viewModel.itemViewValueKey)}}", '<i class="icon ion-trash-a" style="cursor:pointer" ng-click="viewModel.removeItem($index)"></i>', "</ion-item>", '<ion-item class="item-divider" ng-show="viewModel.searchItems.length > 0">{{viewModel.selectItemsLabel}}</ion-item>', '<ion-item collection-repeat="item in viewModel.searchItems" item-height="55px" item-width="100%" ng-click="viewModel.selectItem(item)">', "{{viewModel.getItemValue(item, viewModel.itemViewValueKey)}}", "</ion-item>", "</ion-content>", "</div>"].join("");
                n.templateUrl ? i(n.templateUrl).then(function (a) {
                    c.find("body").append(h(angular.element(a))(f))
                }) : c.find("body").append(h(angular.element(o))(f)), n.getItemValue = function (a, b) {
                    if (angular.isArray(a)) {
                        var c = [];
                        return angular.forEach(a, function (d) {
                            b && angular.isObject(a) ? c.push(e(b)(d)) : c.push(d)
                        }), c
                    }
                    return b && angular.isObject(a) ? e(b)(a) : a
                }, n.selectItem = function (a, b) {
                    b || (n.searchItems = [], n.searchQuery = void 0), ("1" == n.maxSelectedItems || n.maxSelectedItems != n.selectedItems.length) && (u(n.selectedItems, n.itemValueKey, n.getItemValue(a, n.itemValueKey)) || ("1" == n.maxSelectedItems ? n.selectedItems = [a] : n.selectedItems = n.selectedItems.concat([a])), m.$setViewValue(n.selectedItems), m.$render(), 1 == n.maxSelectedItems && n.hideModal(), angular.isFunction(n.itemsClickedMethod) && n.itemsClickedMethod({
                        callback: {
                            item: a,
                            selectedItems: n.selectedItems.slice(),
                            componentId: n.componentId
                        }
                    }))
                }, n.removeItem = function (a) {
                    var b = n.selectedItems.splice(a, 1)[0];
                    n.selectedItems = n.selectedItems.slice(), m.$setViewValue(n.selectedItems), m.$render(), angular.isFunction(n.itemsRemovedMethod) && n.itemsRemovedMethod({
                        callback: {
                            item: b,
                            selectedItems: n.selectedItems.slice(),
                            componentId: n.componentId
                        }
                    })
                }, f.$watch("viewModel.searchQuery", function (a) {
                    if (void 0 !== a && ("" == a && (n.searchItems = []), angular.isFunction(n.itemsMethod))) {
                        n.showLoadingIcon = !0;
                        var c = {query: a};
                        n.componentId && (c = {query: a, componentId: n.componentId});
                        var e = d.when(n.itemsMethod(c));
                        e.then(function (a) {
                            a && a.data && (a = a.data), n.searchItems = n.getItemValue(a, n.itemsMethodValueKey), b.resize(), n.showLoadingIcon = !1
                        }, function (a) {
                            return d.reject(a)
                        })
                    }
                });
                var p = !1;
                n.showModal = function () {
                    if (!p) {
                        a.retain(), angular.element(c[0].querySelector("div.ion-autocomplete-container." + n.randomCssClass)).css("display", "block"), f.$deregisterBackButton = g.registerBackButtonAction(function () {
                            n.hideModal()
                        }, 300);
                        var d = angular.element(c[0].querySelector("div.ion-autocomplete-container." + n.randomCssClass + " input"));
                        d.length > 0 && (d[0].focus(), setTimeout(function () {
                            d[0].focus()
                        }, 0)), b.resize(), p = !0
                    }
                }, n.hideModal = function () {
                    angular.element(c[0].querySelector("div.ion-autocomplete-container." + n.randomCssClass)).css("display", "none"), a.release(), f.$deregisterBackButton && f.$deregisterBackButton(), p = !1
                };
                var q = {moved: !1, startX: 0, startY: 0}, r = function (a) {
                    q.moved = !1, "undefined" != typeof a.originalEvent && (a = a.originalEvent), q.startX = a.touches[0].clientX, q.startY = a.touches[0].clientY
                }, s = function (a) {
                    "undefined" != typeof a.originalEvent && (a = a.originalEvent), (Math.abs(a.touches[0].clientX - q.startX) > 10 || Math.abs(a.touches[0].clientY - q.startY) > 10) && (q.moved = !0)
                }, t = function (a) {
                    q.moved || (a.preventDefault(), a.stopPropagation(), n.showModal())
                }, u = function (a, b, c) {
                    for (var d = 0; d < a.length; d++)if (n.getItemValue(a[d], b) === c)return !0;
                    return !1
                }, v = function (a, b) {
                    var c = d.when(n.modelToItemMethod({modelValue: a}));
                    c.then(function (a) {
                        n.selectItem(a, b)
                    }, function (a) {
                        return d.reject(a)
                    })
                };
                "false" == n.manageExternally && (j.bind("touchstart", r), j.bind("touchmove", s), j.bind("touchend click focus", t)), n.cancelClick = function () {
                    n.searchQuery = void 0, n.hideModal(), angular.isFunction(n.cancelButtonClickedMethod) && n.cancelButtonClickedMethod({
                        callback: {
                            selectedItems: n.selectedItems.slice(),
                            componentId: n.componentId
                        }
                    })
                }, n.ngModel && angular.isFunction(n.modelToItemMethod) && (angular.isArray(n.ngModel) ? angular.forEach(n.ngModel, function (a) {
                    v(a, !0)
                }) : v(n.ngModel)), m.$render = function () {
                    j.val(n.getItemValue(m.$viewValue, n.itemViewValueKey))
                }, m.$formatters.push(function (a) {
                    var b = n.getItemValue(a, n.itemViewValueKey);
                    return void 0 == b ? "" : b
                }), m.$parsers.push(function (a) {
                    return n.getItemValue(a, n.itemValueKey)
                })
            }
        }
    }])
}();